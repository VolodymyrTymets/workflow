import { Meteor } from 'meteor/meteor';
import { HTTP } from 'meteor/http';
import { _getProps, _checkUrlFormat } from '../../util'

/**
 * @param {object}
 * @param {string}
 *
 * Use to get nested props, to avoid a && a.b && a.b.c
 * Example of usage
 *  _getProps(a, 'b.c');
 *
 * todo: can be simplicated in futher
 * **/
const _getProps = (obj = {}, path = '') => {
  var paths = path.split('.')
    , current = obj
    , i;

  for (i = 0; i < paths.length; ++i) {
    if (current[paths[i]] == undefined) {
      return undefined;
    } else {
      current = current[paths[i]];
    }
  }
  return current;
};

/**
 * Generate Rating os site
 *
 * Virustotal has list of scanning site, by different antiviruses.
 * Rating of site is a count of success scanning in percents.
 *
 * @param { Object }
 * @return { Number }
 *
 **/
const getRatingsByScans = scans => {
  const scansKeys = Object.keys(scans);
  const detectedScansKeys = scansKeys.filter(scanKey => scans[scanKey].detected);
  const detectedInPercent = detectedScansKeys.length > 0 &&
    detectedScansKeys.length * 100 / scansKeys.length || 0;
  return 100 - detectedInPercent;
};

const sendRequest = (type, url, params) => {
  try {
    var result = HTTP.call(type, url,   {
      params: {
        ...params,
        apikey: Meteor.settings.VirustotalKey,
      } });
    return result;
  } catch (e) {
    return false;
  }
};

// String -> Object
const sendScanRequest = url =>
  sendRequest('POST', 'https://www.virustotal.com/vtapi/v2/url/scan', { url });

// String -> Object
const sendReportRequest = url =>
  sendRequest('POST', 'https://www.virustotal.com/vtapi/v2/url/report', { resource: url });

/**
 * Check url for malware
 *
 * Check url for malware via service: https://www.virustotal.com,
 * return rating of site security in percent
 *
 * Get rating site if exist in Virus Total database (report request), if not
 * Register site for later scanning in Virus Total system (scan request can takes hours), in
 * this case, we decide  that checked url has malware
 *
 * @param { String } url
 * @return number
 * **/
export const getUrlMalwareRating = url => {
  const result = _checkUrlFormat(url) && sendReportRequest(url);

  if(_getProps(result, 'data.response_code') === 0) {
    sendScanRequest();
    return 0;
  }
  const scans = result && _getProps(result, 'data.scans');
  const urlRating = scans && getRatingsByScans(scans);

  return scans && urlRating || 0;
};

